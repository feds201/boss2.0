// src/commands/commandHandlers.js
const { EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, PermissionsBitField } = require('discord.js');
const { credentials, updateCredentials, CHANNEL_ID         // Add formatted social media links with clickable URLs if available
        if (tbaData.social && tbaData.social.length > 0) {
            const { formatSocialMediaLinks } = require('../utils/apiUtils');
            const socialLinks = formatSocialMediaLinks(tbaData.social);
            
            teamInfoEmbed.addFields({
                name: '🌐 Social Media Channels',
                value: socialLinks || 'No social media channels found'
            });
        }ig');
const { getLatestProgrammingCommit, getOctokit } = require('../client');
const https = require('https');

// Team info command
const handleTeamInfo = async (interaction) => {
    // Get options from the command
    const teamNumber = interaction.options.getInteger('team_number') || 201; // Default to 201 if not specified
    const useAI = interaction.options.getBoolean('use_ai') || false;

    // Defer the reply as API calls might take some time
    await interaction.deferReply();
      try {
        const { 
            fetchTeamInfoFromTBA, 
            fetchTeamStatsFromStatbotics, 
            fetchTeamEPAHistory,
            getAIInsights,
            formatWinRateBar,
            generateEPAGraph
        } = require('../utils/apiUtils');        // Enhanced loading embed with animation-like appearance
        const loadingEmbed = new EmbedBuilder()
            .setColor('#36393F')
            .setTitle(`🔍 Scouting Team ${teamNumber}...`)
            .setDescription(
                '```\n' +
                '⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷\n' +
                '⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠁⠀⠀⠀⠀⠈⠉⠛⠿⣿⣿⣿⣿⣿⣿⣿\n' +
                '⣿⣿⣿⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣿⣿⣿⣿\n' +
                '⣿⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀⢀⣠⣤⣴⣦⣄⣀⠀⠀⠀⠀⠀⠈⢻⣿⣿\n' +
                '⣿⣿⡿⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣶⡄⠀⠀⠀⠀⢿⣿\n' +
                '⣿⣿⠃⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠘⣿\n' +
                '⣿⡟⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⢿\n' +
                '⣿⠁⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠸\n' +
                '⣿⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀\n' +
                '⣿⡀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⢀\n' +
                '⣿⣇⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⣸\n' +
                '⣿⣿⣄⠀⠈⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠁⠀⠀⣠⣿⣿\n' +
                '⣿⣿⣿⣷⣤⣀⠀⠀⠉⠛⠿⢿⣿⣿⡿⠿⠛⠉⠁⠀⣀⣤⣶⣿⣿⣿⣿\n' +
                '⣿⣿⣿⣿⣿⣿⣿⣶⣦⣤⣤⣤⣤⣤⣤⣤⣴⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿\n' +
                '```\n' +
                '📊 Fetching team statistics from The Blue Alliance and Statbotics...\n' +
                '📈 Analyzing performance data...\n' +
                '🏆 Retrieving event history and awards...'
            )
            .setFooter({ text: 'This may take a few seconds depending on API response times' });
            
        await interaction.editReply({ embeds: [loadingEmbed] });
        
        // Start making API calls
        const tbaPromise = fetchTeamInfoFromTBA(teamNumber);
        const statboticsPromise = fetchTeamStatsFromStatbotics(teamNumber);
        const epaHistoryPromise = fetchTeamEPAHistory(teamNumber);

        // Wait for all API calls to complete
        const [tbaData, statboticsData, epaHistoryData] = await Promise.all([
            tbaPromise, 
            statboticsPromise, 
            epaHistoryPromise
        ]);        // Prepare the team info embed with enhanced visuals
        const team = tbaData.team;
        const stats = statboticsData.overall;
        const currentYearStats = statboticsData.currentYear;
        
        // Extract win/loss data from the nested record object
        const wins = stats.record?.wins;
        const losses = stats.record?.losses;
        const winRate = stats.record?.winrate || (wins && losses ? wins / (wins + losses) : null);
        const winRateBar = formatWinRateBar(winRate);
        
        // Extract EPA from the nested norm_epa object
        const recentEPA = stats.norm_epa?.recent;
        
        // Choose emblem color based on team's performance
        let embedColor = '#3498DB'; // Default blue
        let teamRating = ''; // Performance rating text
        
        if (recentEPA !== undefined) {
            if (recentEPA > 1.8) {
                embedColor = '#2ECC71'; // Green for high performers
                teamRating = '⭐ Elite Team';
            } else if (recentEPA > 1.5) {
                embedColor = '#F1C40F'; // Yellow/gold for strong performers
                teamRating = '💪 Strong Performer';
            } else if (recentEPA < 0.8) {
                embedColor = '#E74C3C'; // Red for struggling teams
                teamRating = '🔄 Developing Team';
            } else {
                teamRating = '✓ Solid Competitor';
            }
        }
        
        // Create a more visually appealing title with team and mascot emojis
        const teamInfoEmbed = new EmbedBuilder()
            .setColor(embedColor)
            .setTitle(`🤖 Team ${team.team_number} - "${team.nickname}" ${teamRating}`)
            .setDescription(
                `**📍 Location:** ${team.city}, ${team.state_prov}, ${team.country}\n` +
                `**🚀 Rookie Year:** ${team.rookie_year} (${new Date().getFullYear() - team.rookie_year} years of experience)\n` +
                `**🌐 Website:** ${team.website ? `[${team.website.replace(/^https?:\/\//, '').replace(/\/$/, '')}](${team.website})` : 'No website listed'}`
            )
            .setThumbnail(`https://frc-avatar.firstinspires.org/avatar_${team.team_number}.png`);
        
        // Create a visually distinct separator for sections
        const sectionSeparator = '┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈';
        
        // Add enhanced key performance metrics with icons and better formatting
        // Add team ranking information if available
        let rankInfo = '';
        if (currentYearStats && currentYearStats.rank) {
            rankInfo = `**🏆 Current Rank:** #${currentYearStats.rank} of ${currentYearStats.total_teams || '?'} teams\n`;
        }
        
        teamInfoEmbed.addFields({
            name: '📊 Performance Metrics',
            value: 
                `${rankInfo}` +
                `**🔢 EPA Rating:** ${recentEPA !== undefined ? recentEPA.toFixed(2) : 'N/A'} ${recentEPA && recentEPA > 1.7 ? '🔥' : ''}\n`+
                `**📝 Record:** ${wins || 0}W - ${losses || 0}L\n`+
                `**📈 Win Rate:** ${winRateBar}\n`+
                `**📆 Competition Experience:** ${tbaData.years ? tbaData.years.length : '1'}+ seasons\n`
        });
        
        // Add EPA history graph with enhanced visuals
        if (epaHistoryData && epaHistoryData.length > 0) {
            const epaGraph = generateEPAGraph(epaHistoryData);
            teamInfoEmbed.addFields({
                name: '📈 Performance History',
                value: epaGraph
            });
        }
        
        // Add recent events with enhanced formatting and emojis for status
        if (tbaData.events && tbaData.events.length > 0) {
            // Sort events by start date
            const sortedEvents = [...tbaData.events].sort((a, b) => 
                new Date(a.start_date) - new Date(b.start_date)
            );
            
            const now = new Date();
            const recentEvents = sortedEvents.slice(0, 3).map(event => {
                const startDate = new Date(event.start_date);
                const endDate = new Date(event.end_date || event.start_date);
                
                // Add event status emoji
                let statusEmoji = '📅'; // Default calendar
                if (now < startDate) {
                    statusEmoji = '⏳'; // Upcoming event
                } else if (now >= startDate && now <= endDate) {
                    statusEmoji = '🔴'; // Live event
                } else {
                    statusEmoji = '✓'; // Completed event
                }
                
                return `${statusEmoji} **${event.name}**\n   📍 ${event.city}, ${event.state_prov}\n   📆 ${event.start_date} to ${event.end_date || event.start_date}`;
            }).join('\n\n');
            
            teamInfoEmbed.addFields({
                name: '🏆 2025 Events',
                value: recentEvents || 'No events for 2025 found'
            });
        }
        
        // Add notable awards with enhanced formatting and categorization
        if (tbaData.awards && tbaData.awards.length > 0) {
            // Prioritize championship and prestigious awards
            const sortedAwards = [...tbaData.awards].sort((a, b) => {
                // Prioritize Chairman's and other prestigious awards
                const prestigiousKeywords = ['chairman', 'championship', 'winner', 'finalist', 'excellence', 'world'];
                const aIsPrestiguous = prestigiousKeywords.some(keyword => a.name.toLowerCase().includes(keyword));
                const bIsPrestiguous = prestigiousKeywords.some(keyword => b.name.toLowerCase().includes(keyword));
                
                if (aIsPrestiguous && !bIsPrestiguous) return -1;
                if (!aIsPrestiguous && bIsPrestiguous) return 1;
                
                // Then sort by recent year
                return b.year - a.year;
            });
            
            const notableAwards = sortedAwards.slice(0, 5).map(award => {
                // Add special emoji for prestigious awards
                let awardEmoji = '🏅';
                if (award.name.toLowerCase().includes('chairman')) {
                    awardEmoji = '🏆';
                } else if (award.name.toLowerCase().includes('winner')) {
                    awardEmoji = '🥇';
                } else if (award.name.toLowerCase().includes('finalist')) {
                    awardEmoji = '🥈';
                } else if (award.name.toLowerCase().includes('champion')) {
                    awardEmoji = '👑';
                }
                
                return `${awardEmoji} **${award.name}** (${award.year})`;
            }).join('\n');
            
            teamInfoEmbed.addFields({
                name: '🏆 Notable Awards',
                value: notableAwards || 'No awards found'
            });
        }
        
        // Add social media links with proper icons
        if (tbaData.social && tbaData.social.length > 0) {
            const socialIcons = {
                'facebook-profile': '👥 Facebook',
                'twitter-profile': '🐦 Twitter',
                'youtube-channel': '📺 YouTube',
                'instagram-profile': '📷 Instagram',
                'github-profile': '💻 GitHub'
            };
            
            const socialLinks = tbaData.social.map(social => {
                const icon = socialIcons[social.type] || '🔗';
                return `${icon}: ${social.foreign_key}`;
            }).join('\n');
            
            teamInfoEmbed.addFields({
                name: '🌐 Social Media',
                value: socialLinks || 'No social media found'
            });
        }
        
        teamInfoEmbed.setTimestamp()
            .setFooter({ 
                text: `Data retrieved from TBA and Statbotics as of ${new Date().toLocaleDateString()}`,
                iconURL: 'https://www.thebluealliance.com/images/logo_blue_background_tinythumb.gif'
            });        // Add enhanced buttons with better styles and descriptions
        // Create buttons for more actions with improved styling
        const tbaButton = new ButtonBuilder()
            .setLabel('📊 View on The Blue Alliance')
            .setStyle(ButtonStyle.Link)
            .setURL(`https://www.thebluealliance.com/team/${teamNumber}`);
            
        const statboticsButton = new ButtonBuilder()
            .setLabel('📈 View Statistics')
            .setStyle(ButtonStyle.Link)
            .setURL(`https://statbotics.io/team/${teamNumber}`);
            
        // Create first row with external links
        const row1 = new ActionRowBuilder().addComponents(tbaButton, statboticsButton);
        
        // Create buttons for video links if available
        const buttons = [row1];
        
        // Optional buttons for team social media profiles
        if (tbaData.team.website) {
            const websiteButton = new ButtonBuilder()
                .setLabel('🌐 Team Website')
                .setStyle(ButtonStyle.Link)
                .setURL(tbaData.team.website);
                
            // Add website button to first row if there's space
            if (row1.components.length < 5) {
                row1.addComponents(websiteButton);
            }
        }
        
        // If user requested AI insights, generate and add them
        if (useAI) {
            const aiInsightButton = new ButtonBuilder()
                .setCustomId(`get_ai_insights_${teamNumber}`)
                .setLabel('🤖 Generate AI Insights')
                .setStyle(ButtonStyle.Primary);
                
            // Create a second row if first row is full
            if (row1.components.length >= 5) {
                const row2 = new ActionRowBuilder().addComponents(aiInsightButton);
                buttons.push(row2);
            } else {
                row1.addComponents(aiInsightButton);
            }
            
            // Process AI insights in the background if requested
            getAIInsights({ tba: tbaData, statbotics: statboticsData })
                .then(insights => {
                    // Store insights in memory for button interaction
                    global.teamInsights = global.teamInsights || {};
                    global.teamInsights[teamNumber] = insights;
                })
                .catch(error => {
                    console.error('Error generating AI insights:', error);
                });
        }
        
        // Optional button to find team videos if available
        const youtubeButton = new ButtonBuilder()
            .setLabel('📹 Watch Matches')
            .setStyle(ButtonStyle.Link)
            .setURL(`https://www.youtube.com/results?search_query=frc+team+${teamNumber}+matches`);
            
        // Add to second row or create one if needed
        if (buttons.length > 1 && buttons[1].components.length < 5) {
            buttons[1].addComponents(youtubeButton);
        } else if (row1.components.length < 5) {
            row1.addComponents(youtubeButton);
        } else {
            const row2 = new ActionRowBuilder().addComponents(youtubeButton);
            buttons.push(row2);
        }
          // Send the reply with the enhanced team info embed and buttons
        await interaction.editReply({
            embeds: [teamInfoEmbed],
            components: buttons
        });    } catch (error) {
        console.error('Error in team info command:', error);
        
        // Enhanced error handling embed with more helpful information and troubleshooting tips
        const errorEmbed = new EmbedBuilder()
            .setColor('#E74C3C')
            .setTitle('❌ Team Information Unavailable')
            .setDescription(`We couldn't retrieve information for team ${teamNumber}.`)
            .addFields(
                {
                    name: '🔍 Possible Reasons',
                    value: [
                        '• Invalid team number',
                        '• Team does not exist',
                        '• The Blue Alliance API is currently unavailable',
                        '• Statbotics API is currently unavailable',
                        '• Network connectivity issues'
                    ].join('\n')
                },
                {
                    name: '💡 What You Can Do',
                    value: [
                        '• Double check the team number',
                        '• Try again in a few minutes',
                        '• Verify if the team exists on [The Blue Alliance](https://www.thebluealliance.com/)',
                        '• Ask an administrator to check API keys'
                    ].join('\n')
                },
                {
                    name: '⚙️ Error Details',
                    value: `\`\`\`\n${error.message.substring(0, 256)}\n\`\`\``
                }
            )
            .setFooter({ 
                text: 'If this problem persists, please contact the bot administrator',
                iconURL: 'https://www.thebluealliance.com/images/logo_blue_background_tinythumb.gif'
            });
            
        // Add direct link button to TBA anyway
        const tbaButton = new ButtonBuilder()
            .setLabel('📊 Check on The Blue Alliance')
            .setStyle(ButtonStyle.Link)
            .setURL(`https://www.thebluealliance.com/team/${teamNumber}`);
            
        const row = new ActionRowBuilder().addComponents(tbaButton);
        
        await interaction.editReply({ 
            embeds: [errorEmbed],
            components: [row]
        });
    }
};

// Status command
const handleStatus = async (interaction) => {
    const statusEmbed = new EmbedBuilder()
        .setColor('#00FF00')
        .setTitle('Bot Status')
        .setDescription('🟢 Bot is working properly');

    const refreshButton = new ButtonBuilder()
        .setCustomId('refresh_status')
        .setLabel('Refresh Status')
        .setStyle(ButtonStyle.Primary);

    const row = new ActionRowBuilder().addComponents(refreshButton);

    await interaction.reply({ embeds: [statusEmbed], components: [row] });
};

// Fetch programming latest command
const handleFetchProgLatest = async (interaction) => {
    const progEmbed = new EmbedBuilder()
        .setColor('#FF0000')
        .setTitle('Programming Group')
        .setDescription(`🚧 Latest progress: ${getLatestProgrammingCommit()}`);

    await interaction.reply({ embeds: [progEmbed] });
};

// Get latest stable robot commit command
const handleGetLatestStableRobotCommit = async (interaction) => {
    const commitUrl = credentials.latestStableCommit;

    const robotEmbed = new EmbedBuilder()
        .setColor('#FF0000')
        .setTitle('Robot Repository')
        .setThumbnail('https://i.imgur.com/aVyfHJK.png')
        .setDescription(`🤖 Latest stable commit: [Commit URL](${commitUrl})`);

    // Check if the commit URL is valid
    let row;
    if (commitUrl && commitUrl.startsWith('http')) {
        // Create a button for viewing the commit
        const viewCommitButton = new ButtonBuilder()
            .setLabel('View Commit')
            .setStyle(ButtonStyle.Link)
            .setURL(commitUrl);

        row = new ActionRowBuilder().addComponents(viewCommitButton);
    }

    await interaction.reply({ embeds: [robotEmbed], components: row ? [row] : [] });
};

// Set stable commit command
const handleSetStableCommit = async (interaction) => {
    // Save the latest stable commit link to the JSON file
    updateCredentials({ latestStableCommit: interaction.options.getString('commit_link') });
    await interaction.reply(`✅ Latest stable commit link has been set!`);
};

// Set webhook command
const handleSetWebhook = async (interaction) => {
    const webhookUrl = interaction.options.getString('webhook_url');
    const webhookSecret = interaction.options.getString('webhook_secret');
    const webhookId = interaction.options.getString('webhook_id');
    const documentId = interaction.options.getString('document_id');

    // Save the webhook details to the JSON file
    updateCredentials({ 
        onshapeWebhook: { 
            url: webhookUrl, 
            secret: webhookSecret, 
            id: webhookId, 
            documentId: documentId 
        } 
    });

    // Register the webhook with Onshape
    await interaction.reply(`✅ Onshape webhook has been set!`);
};

// Self-inspect command
const handleSelfInspect = async (interaction) => {
    await interaction.deferReply();

    const checks = [];

    // Check if the bot has the necessary permissions
    const requiredPermissions = [
        PermissionsBitField.Flags.SendMessages, 
        PermissionsBitField.Flags.EmbedLinks, 
        PermissionsBitField.Flags.CreateEvents
    ];
    
    let hasPermissions = false;
    if (interaction.guild && interaction.guild.members.me) {
        hasPermissions = interaction.guild.members.me.permissionsIn(interaction.channelId).has(requiredPermissions);
    }
    checks.push(`${hasPermissions ? '✅' : '❌'} Permissions`);

    // Check if the bot has the necessary roles
    const requiredRoles = ['BOSS']; // Replace with actual role names
    let hasRoles = false;
    if (interaction.guild && interaction.guild.members.me) {
        hasRoles = requiredRoles.every(role => interaction.guild.members.me.roles.cache.some(r => r.name === role));
    }
    checks.push(`${hasRoles ? '✅' : '❌'} Roles`);

    // Check if the bot can ping the internet
    const canPingInternet = await new Promise(resolve => {
        require('dns').resolve('www.google.com', err => {
            resolve(!err);
        });
    });
    checks.push(`${canPingInternet ? '✅' : '❌'} Internet`);

    // Simulate Onshape, GitHub, and Discord webhooks creation checks
    const canCreateOnshapeWebhook = true;
    const canCreateGitHubWebhook = true;
    const canCreateDiscordWebhook = true;
    checks.push(`${canCreateOnshapeWebhook ? '✅' : '❌'} Onshape Webhooks`);
    checks.push(`${canCreateGitHubWebhook ? '✅' : '❌'} GitHub Webhooks`);
    checks.push(`${canCreateDiscordWebhook ? '✅' : '❌'} Discord Webhooks`);

    // Create the embed with the results
    const selfInspectEmbed = new EmbedBuilder()
        .setColor('#00FF00')
        .setTitle('Self-Inspection')
        .setDescription(checks.join('\n'));

    await interaction.editReply({ embeds: [selfInspectEmbed] });
};

// Set channel ID command
const handleSetChannelId = async (interaction) => {
    const channelId = interaction.options.getString('channel_id');
    // Note: This is temporary, as CHANNEL_ID is imported from config. Consider adding a setter in config.
    global.CHANNEL_ID = channelId;
    await interaction.reply(`✅ Channel ID has been set to ||${channelId}||`);
};

// Get machine IP command
const handleGetMachineIp = async (interaction) => {
    // Fetch public IP from an external API
    https.get('https://api.ipify.org?format=json', (resp) => {
        let data = '';

        // A chunk of data has been received
        resp.on('data', (chunk) => {
            data += chunk;
        });

        // The whole response has been received
        resp.on('end', () => {
            const ip = JSON.parse(data).ip;
            interaction.reply(`🌐 Public IP: ||${ip}||`);
        });
    }).on('error', (err) => {
        console.error(err);
        interaction.reply('❌ Failed to fetch the public IP');
    });
};

module.exports = {
    handleStatus,
    handleFetchProgLatest,
    handleGetLatestStableRobotCommit,
    handleSetStableCommit,
    handleSetWebhook,
    handleSelfInspect,
    handleSetChannelId,
    handleGetMachineIp,
    handleTeamInfo
};
